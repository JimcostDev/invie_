--Unwatch (Nos permite que nos lleguen notificaciones si hay cambios en el repositorio)

--Not watching (Se te notifica cuando participas o mencionas)

--Ignoring (Nunca ser notificado)

--Star (Asi como en facebook se vive a base de likes, aqui se vive a base de estrellas, 
cuanto mas estrellas mas valorado es ese proyecto, y a su misma vez tiene muchos forks)

--Fork (Indica la cantidad de gente que hizo copia de su repositorio para poderles enviar cambios)

--Podemos ver las estadísticas de nuestro proyecto en Insights

--contributors (Nos permite ver el avance de nuestro proyecto)

--traffic (Nos muestra el trafico de nuestro proyecto)

--punch card (Muestra los dias que a estado trabajando)

--network (Vemos el flujo de ramas)

--members (Nos muestra la gente que le a hecho fork a nuestro repositorio)

--dependents (Nos muestra si nuestro repositorio depende de otro, es decir de un super repositorio)

‘‘LeonidasEsteban’’ Para proyectos complejos se puede hacer un “dependecia” de repositorios o sub repositorios. 
Es como un proyecto dentro de otro pero es muy raro usarlos y de preferencia yo solo recomiendo un solo reposotorio’.

----Settings:

--collaborators (Aqui se añade a mas gente para que colabore en este proyecto)

--branches (Podemos cambiar la rama principal, y proteger ramas)

CONSEJO: Protege siempre la rama master (Una vez protegida ningun cambio va a ir 
directamente a master tenemos que pasar por cierto proceso para que un codigo vaya a master) 
(Este proceso lo vemos dentro del curso)

--pull request (Es una forma de tomar una rama alterna por ejemplo la rama RD y no mezclarla directamente con master. 
Si no enviar una solicitud de mezcla desde la rama RD a la master, asi alguien mas puede ver esa solicitud, 
algun colaborador, etc…Y se haga un code review)

--Webhooks (Es la forma de poderle agregar git code a otros servicios para que hagan un auto deploy)

---Integrations & servicies (Incluir otros servicios como amazon, y que pueden hacer uso de nuestro repositorio)

--Deploy keys (Son las llaves publicas ssh de tu servidor para poder hacer git pull desde el servidor, y 
tener tu código en producción.)

--Pull requests (Vemos una lista de pull requests)

--Issues (Son la forma en que manejamos nuestros problemas, bugs en github. Por ejemplo: hay un bug, este no
 va a ser reportado si no que lo que vamos a hacer es crear un issue comentando donde hay un problema, 
 se hace de esta manera, ocurre en tal sistema operativo, etc…)

--Proyects (Nos aparece nuestros proyectos)

Al crear un “issue” o un “pull request”, github te permite incluir etiquetas en los mismos. 
Entre las etiquetas que nos pueden interesar a los que estamos comenzando a usar la plataforma 
se encuentran “help wanted” y “good first issue”. Github anima a los desarrolladores a que 
marquen los “issue” y los “pull request” que son más aptos para los que inician en este
mundo con estas etiquetas y adicionalmente se pide a la comunidad que den un apoyo especial 
para estos issue/pull request. ¿Quiéres comenzar a colaborar en un proyecto real en Github
pero aún te sientes inseguro con tus conocimientos? Haz una búsqueda de estás etiquetas y 
encontrarás miles de oportunidades para hacer tu primer aporte.